(define-module npsv-verilog
  (export-all))

;;;--------------------------------------------------------------------------------
;;; RTL
;;;--------------------------------------------------------------------------------
(define write-header
  (lambda (fp name)
    (format fp "//-------------------------------------------------~%")
    (format fp "// ~A~%" name)
    (format fp "// This file was auto-generated by npsv ~A~%" (date->string (current-date) "~5"))
    (format fp "//-------------------------------------------------~%")))


(define bit-slice-str
  (lambda (lsb msb)
    (if (and (zero? lsb) (zero? msb))
        ""
        (string-append "[" (number->string msb) ":" (number->string lsb) "]"))))

(define comment-str
  (lambda (comment)
    (if (string=? comment "")
        ""
        (string-append "// " comment))))

(define write-cr
  (lambda (fp)
    (format fp "~%")))

(define write-verilog-file
  (lambda (inst text)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'rtl-output-dir)]
           [fp (open-verilog-file dir name)])
      (write-header fp name)
      (format fp text)
      (close-verilog-file fp))))

(define write-verilog-testbench-file
  (lambda (inst text)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'testbench-output-dir)]
           [fp (open-verilog-file dir (string-append name "_tb"))])
      (write-header fp name)
      (format fp text)
      (close-verilog-file fp))))

(define write-template-ports
  (lambda (fp ports)
    (let ([name (ref (car ports) 'name)])
      (if (= (length ports) 1)
          (format fp "\t\t.~A()~%" name)  ;; no camma
          (begin
            (format fp "\t\t.~A(),~%" name)
            (write-template-ports fp (cdr ports)))))))

(define make-template
  (lambda (inst)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'template-ouput-dir)]
           [fp (open-verilog-file dir (string-append name "_template"))])
      (write-header fp name)
      (write-cr fp)
      (format fp "\t~A ~A (~%" name name)
      (write-template-ports fp (ref inst 'ports))
      (format fp "\t);~%")
      (close-verilog-file fp))))

(define dec->verilolg-hex-str
  (lambda (d bit)
    (let* ([dispwidth (* (exact (ceiling (/ bit 8))) 2)]
           [val-str (number->string (logand (- (power 2 bit) 1) d) 16)]
           )      
      (format #f (string-append "~A'h~" (x->string dispwidth) ",,,'0@A") bit val-str))))


(provide "npsv-verilog")
