(use srfi-19)
(use srfi-13)
(use file.util)
(add-load-path "module/" :relative)

(define-module npsv
  (extend
   npsv-core
   npsv-inmem))

(require "npsv-core")
(require "npsv-inmem")

;;;--------------------------------------------------------------------------------
;;; RTL
;;;--------------------------------------------------------------------------------
(define write-header
  (lambda (fp name)
    (format fp "//-------------------------------------------------~%")
    (format fp "// ~A~%" name)
    (format fp "// This file was auto-generated by npsv ~A~%" (date->string (current-date) "~5"))
    (format fp "//-------------------------------------------------~%")))


(define bit-slice-str
  (lambda (lsb msb)
    (if (and (zero? lsb) (zero? msb))
        ""
        (string-append "[" (number->string msb) ":" (number->string lsb) "]"))))

(define comment-str
  (lambda (comment)
    (if (string=? comment "")
        ""
        (string-append "// " comment))))

(define write-cr
  (lambda (fp)
    (format fp "~%")))

(define write-verilog-file
  (lambda (inst text)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'rtl-output-dir)]
           [fp (open-verilog-file dir name)])
      (write-header fp name)
      (format fp text)
      (close-verilog-file fp))))

(define write-verilog-testbench-file
  (lambda (inst text)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'testbench-output-dir)]
           [fp (open-verilog-file dir (string-append name "_tb"))])
      (write-header fp name)
      (format fp text)
      (close-verilog-file fp))))


(define write-template-ports
  (lambda (fp ports)
    (let ([name (ref (car ports) 'name)])
      (if (= (length ports) 1)
          (format fp "\t\t.~A()~%" name)  ;; no camma
          (begin
            (format fp "\t\t.~A(),~%" name)
            (write-template-ports fp (cdr ports)))))))

(define make-template
  (lambda (inst)
    (let* ([name (ref inst 'name)]
           [dir (ref inst 'template-ouput-dir)]
           [fp (open-verilog-file dir (string-append name "_template"))])
      (write-header fp name)
      (write-cr fp)
      (format fp "\t~A ~A (~%" name name)
      (write-template-ports fp (ref inst 'ports))
      (format fp "\t);~%")
      (close-verilog-file fp))))


(define quantize
  (lambda (x)
    (if (< x 0)
        (- x 1)
        x)))

(define toFix
  (lambda (x W I)
    (let ((val (* x (power 2 (- W I 1))))
          (max (- (power 2 (- W 1)) 1))
          (min (- (power 2 (- W 1)))))
      (let ((val_int (exact (values-ref (modf val) 1))))
        (clamp  (quantize val_int)  min  max)))))


;;;--------------------------------------------------------------------------------
;;; file
;;;--------------------------------------------------------------------------------
(define open-verilog-file
  (lambda (dir name)
    (let ((fname (string-append dir "/" name ".v")))                 
      (make-directory* dir)
      (format #t "open ~A~%" fname)
      (open-output-file fname)
      )))

(define close-verilog-file
  (lambda (fp)
    (close-output-port fp)))

(define load-setting-file
  (lambda (fname)
    (format #t "load ~A~%" fname)
    (load fname :environment (current-module))))
    
(define clear-global-parameters!
  (lambda (params)
    (dolist (p params)
            (set! p '()))))


;;misc
(define usage-exit
  (lambda (program-name)
    (format #t "Usage: gosh ~A setting-file~%" program-name)
    (exit 1)))

(define power
  (lambda (x n)
    (if (= n 1)
        x
        (* (power x (- n 1)) x))))

(define datanum->adr-w
  (lambda (datanum)
    (ceiling->exact (log datanum 2))))


(provide "npsv")
