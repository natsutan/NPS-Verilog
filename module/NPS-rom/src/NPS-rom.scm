(use srfi-1)
(add-load-path "../../../common/" :relative)
(require "npsv")

(define *instance* '())

(define print-setting
  (lambda ()
    (format #t "function ~A~%" sin)
    (format #t "range ~A - ~A~%" *npsv-min* *npsv-max*)
    (format #t "adr width ~A~%"  *npsv-adr-width*)
    (format #t "data width ~A (integer ~A)~%" *npsv-W* *npsv-I*)
    (format #t "module name ~A~%" *npsv-module-name*)
    (format #t "output dir ~A~%" *npsv-rtl-output-dir*)
    (format #t "testbench dir ~A~%" *npsv-testbench-output-dir*)
    (format #t "template dir ~A~%" *npsv-template-output-dir*)))

(define open-verilog-file
  (lambda (dir name)
    (let ((fname (string-append dir "/" name ".v")))                 
      (make-directory* dir)
      (format #t "open ~A~%" fname)
      (open-output-file fname)
      )))

(define close-verilog-file
  (lambda (fp)
    (close-output-port fp)))


(define make-header
  (lambda (fp name)
    (format fp "//-------------------------------------------------~%")
    (format fp "// ~A~%" name)
    (format fp "// This file was auto-generated by nromgen ~A~%" (date->string (current-date) "~5"))
    (format fp "//-------------------------------------------------~%")))

;;; --------------------------------------------------------------------------------
;;; make rom data
;;; --------------------------------------------------------------------------------


(define make-data
  (lambda (func min max adrw W I)
    (let* ((num (power 2 adrw))
	   (data (make-vector num))
	   (unit (/ (- max min) num)))
      (dotimes(x num)
       (vector-set! data x (toFix (func (+ (* x unit) min)) W I)))
;      (print data)
      data)))


;;; --------------------------------------------------------------------------------
;;; verilog rtl
;;; --------------------------------------------------------------------------------

(define romdata->string
  (lambda (data dataw)
    (let ((format (- (power 2 dataw) 1)))
      (number->string (logand format data) 16))))

(define make-rtl
  (lambda (dir name data adrw dataw)
    (let ((fp (open-verilog-file dir name)))
      (make-header fp name)
      (format fp "module ~A~%" name)
      (format fp "\t(~%")
      (format fp "\tinput CLK,~%")
      (format fp "\tinput RESET_X,~%")
      (format fp "\tinput \[~A:0\] ADR,~%" (- adrw 1))
      (format fp "\toutput reg \[~A:0\] DATA~%" (- dataw 1))
      (format fp "\t);~%")
      (format fp "\talways @(posedge CLK or negedge RESET_X)begin~%")
      (format fp "\t\tif(RESET_X == 1'b0)begin~%")
      (format fp "\t\t\tDATA <= ~A'd0;~%" dataw)
      (format fp "\t\tend else begin~%")
      (format fp "\t\t\tcase(ADR)~%")
      (dotimes (x (power 2 adrw))
               (format fp "\t\t\t~A:DATA <= ~A'h~A;~%"
                       x dataw (romdata->string (vector-ref data x) dataw)))
      (format fp "\t\t\tendcase~%")
      (format fp "\t\tend~%")
      (format fp "\tend~%")
      (format fp "endmodule~%")
      (close-verilog-file fp))))

;;; --------------------------------------------------------------------------------
;;; verilog testbench
;;; --------------------------------------------------------------------------------

(define make-testbench
  (lambda (dir name adrw dataw)
    (let ((fname (string-append name "_tb")))
      (let ((fp (open-verilog-file dir fname)))
        (make-header fp fname)
        (format fp "module ~A ();~%" fname)
        ; wire/signal/variable
        (format fp "\treg CLK;~%")
        (format fp "\treg RESET_X;~%")
        (format fp "\treg \[~A:0\] ADR;~%" (- adrw 1))
        (format fp "\twire \[~A:0\] DATA;~%" (- dataw 1))
        (format fp "\tinteger i;~%")
        (format fp "\tinteger fp;~%")
        (format fp "~%")
        ; clk
        (format fp "\tparameter PERIOD = 10.0;~%")
        (format fp "\talways # (PERIOD/2) CLK = ~~CLK;~%")
        (format fp "\tinitial begin CLK = 1;end~%")
        (format fp "~%")
        ; instance
        (format fp "\t~A U0 (~%" name)
        (format fp "\t\t.CLK(CLK),~%")
        (format fp "\t\t.RESET_X(RESET_X),~%")
        (format fp "\t\t.ADR(ADR),~%")
        (format fp "\t\t.DATA(DATA)~%")
        (format fp "\t);~%")
        (format fp "~%")
        ; tb
        (format fp "\tinitial begin~%")
        (format fp "\t\tfp=$fopen(\"dump.txt\");~%")
        (format fp "\t\t#1 RESET_X = 1; ADR = 0;~%")
        (format fp "\t\t# (PERIOD * 3)  RESET_X = 0;~%") 
        (format fp "\t\t# (PERIOD * 5)  RESET_X = 1;~%") 

        (format fp "\t\tfor(i=0;i<~A;i=i+1)begin~%" (power 2 adrw)) 
        (format fp "\t\t\tADR = i;~%")
        (format fp "\t\t\t# (PERIOD) $fwrite(fp, \"%X\\n\", DATA);~%")            
        (format fp "\t\tend~%")  
        (format fp "\t\t# (PERIOD)  $finish();~%")
	(format fp "\tend~%")  
        (format fp "endmodule~%")
        (close-verilog-file fp)))))

;;; --------------------------------------------------------------------------------
;;; verilog template
;;; --------------------------------------------------------------------------------
(define make-template
  (lambda (dir name)
    (let ((fname (string-append name "_template")))
      (let ((fp (open-verilog-file dir fname)))
      (make-header fp fname)
      (format fp "~%")
      (format fp "\t~A ~A (~%" name name)
      (format fp "\t\t.CLK(),~%")
      (format fp "\t\t.RESET_X(),~%")
      (format fp "\t\t.ADR(),~%")
      (format fp "\t\t.DATA()~%")
      (format fp "\t);~%")
      (close-verilog-file fp)))))


(define make-instance
  (lambda (name data-num init-file W I delta)
    (let ([inst (make <npsv-module> :name name :type 'NPS-inmem :comment "input memory module")]
          [adr_w (datanum->adr-w data-num)])
      (add-port inst (make <npsv-port> :name "start" :dir 'input))
      (add-port inst (make <npsv-port> :name "set" :dir 'input))
      (add-port inst (make <npsv-port> :name "vo" :dir 'output :type 'reg))
      (add-port inst (make <npsv-port> :name "fo" :dir 'output :type 'reg))
      (let ((fixed (make <npsv-fixed> :W W :I I)))
        (add-port inst
                  (make <npsv-fixed-port>
                    :name "datao"
                    :dir 'output
                    :msb (- W 1)
                    :lsb 0
                    :fixed-info fixed
                    :type 'reg)))
      (add-port inst (make <npsv-port> :name "cpu_adr" :dir 'input :lsb 0 :msb (- adr_w 1)))
      (add-port inst (make <npsv-port> :name "cpu_data" :dir 'input :lsb 0 :msb (- W 1)))
      (add-port inst (make <npsv-port> :name "cpu_wr" :dir 'input))
      inst)))


;;; --------------------------------------------------------------------------------
;;; main
;;; --------------------------------------------------------------------------------
(define (main args)
  (when (not (= (length args) 2))
    (usage-exit (car args)))

  (load-setting-file (second args))
  (print-setting)
  (set! *instance* (make-instance 
                 *npsv-func*
                 *npsv-min*
                 *npsv-max*
                 *npsv-adr-width* 
                 *npsv-W*
                 *npsv-I*))
  (print-instance *instance*)            

                                        ;    (let ((data (make-data
;                 *npsv-func*
;                 *npsv-min*
;                 *npsv-max*
;                 *npsv-adr-width* 
;                 *npsv-W*
;                 *npsv-I*)))
;      (make-rtl
;       *npsv-rtl-output-dir*
;       *npsv-module-name*
;       data
;       *npsv-adr-width*
;       *npsv-W*
;       )
;      (make-testbench
;       *npsv-testbench-output-dir*
;       *npsv-module-name*
;       *npsv-adr-width*
;       *npsv-W*)
;      (make-template *npsv-template-output-dir* *npsv-module-name*)))
;
    0)


